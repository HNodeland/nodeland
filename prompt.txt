=== server\.env.example ===
DB_HOST=localhost
DB_USER=nodeland
DB_PASS=yourDatabasePassword
DB_NAME=nodeland
PORT=4000

SESSION_SECRET=yourSessionSecret
GOOGLE_CLIENT_ID=yourGoogleClientId
GOOGLE_CLIENT_SECRET=yourGoogleClientSecret
GOOGLE_CALLBACK_URL=http://localhost:4000/auth/google/callback


=== server\auth.js ===
module.exports.ensureAuth = (req, res, next) => {
    if (req.isAuthenticated()) return next();
    res.status(401).json({ error: 'Unauthorized' });
  };

=== server\index.js ===
// server/index.js
require('dotenv').config();

const express = require('express');
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mysql = require('mysql2/promise');
const cors = require('cors');
const path = require('path');

// Middleware to protect routes
const { ensureAuth } = require('./auth');

const app = express();

// Parse JSON bodies
app.use(express.json());

// Allow React dev server to send cookies and auth requests
app.use(cors({
  origin: 'http://localhost:5173',
  credentials: true
}));

// Session configuration
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: false,        // set to true in production (HTTPS)
    sameSite: 'lax'
  }
}));

// Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// Serialize user into session
passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

// Register Google OAuth strategy
passport.use(new GoogleStrategy({
    clientID: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    callbackURL: process.env.GOOGLE_CALLBACK_URL
  },
  async (accessToken, refreshToken, profile, done) => {
    const { id, displayName, emails } = profile;
    const email = emails?.[0]?.value || null;
    try {
      // Upsert user into MySQL
      await app.locals.db.execute(
        `INSERT INTO users (id, displayName, email)
         VALUES (?, ?, ?)
         ON DUPLICATE KEY UPDATE
           displayName = VALUES(displayName),
           email       = VALUES(email)`,
        [id, displayName, email]
      );
      return done(null, { id, displayName });
    } catch (err) {
      console.error('Error upserting user:', err);
      return done(err, null);
    }
  }
));

// ─── Authentication Routes ───────────────────────────────────────────────────
// Trigger Google OAuth
app.get('/auth/google',
  passport.authenticate('google', { scope: ['profile', 'email'] })
);

// OAuth callback
app.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/' }),
  (req, res) => {
    // On success, redirect to frontend
    res.redirect('http://localhost:5173/');
  }
);

// Logout endpoint
app.post('/api/auth/logout', (req, res) => {
  req.logout(err => {
    if (err) return res.status(500).json({ error: 'Logout failed' });
    res.json({ ok: true });
  });
});

// Get current authenticated user
app.get('/api/auth/user', (req, res) => {
  if (!req.isAuthenticated()) return res.status(401).json({ user: null });
  res.json({ user: req.user });
});

// Protected profile endpoint
app.get('/api/profile', ensureAuth, (req, res) => {
  res.json({ user: req.user });
});

// Healthcheck
app.get('/api/health', (_req, res) => {
  res.json({ status: 'OK' });
});

// Optional: static serve React build in production
if (process.env.NODE_ENV === 'production') {
  const buildPath = path.join(__dirname, '../client/dist');
  app.use(express.static(buildPath));
  app.get('*', (_req, res) => {
    res.sendFile(path.join(buildPath, 'index.html'));
  });
}

// Bootstrap: connect to DB and start server
(async () => {
  try {
    const db = await mysql.createPool({
      host:     process.env.DB_HOST,
      user:     process.env.DB_USER,
      password: process.env.DB_PASS,
      database: process.env.DB_NAME,
    });
    app.locals.db = db;

    const port = process.env.PORT || 4000;
    app.listen(port, () => console.log(`Backend listening on http://localhost:${port}`));
  } catch (err) {
    console.error('DB connection failed:', err);
    process.exit(1);
  }
})();

=== server\package.json ===
{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "proxy": "http://localhost:4000" 
  },
  
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-session": "^1.18.1",
    "mysql2": "^3.14.0",
    "passport": "^0.7.0",
    "passport-google-oauth20": "^2.0.0"
  }
}


=== client\.gitignore ===
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


=== client\eslint.config.js ===
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]


=== client\index.html ===
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


=== client\package.json ===
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^6.30.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@tailwindcss/postcss": "^4.1.4",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.1"
  },
  "proxy": "http://localhost:4000"
}


=== client\postcss.config.cjs ===
// client/postcss.config.cjs
const tailwind = require('@tailwindcss/postcss');
const autoprefixer = require('autoprefixer');

module.exports = {
  plugins: [
    tailwind(),       // ← the Tailwind PostCSS adapter
    autoprefixer(),   // ← autoprefixer
  ]
}

=== client\src\App.css ===
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


=== client\src\App.jsx ===
// src/App.jsx
import { useEffect, useState } from 'react'
import { Link } from 'react-router-dom'
import axios from 'axios'

export default function App() {
  const [user, setUser] = useState(undefined)

  useEffect(() => {
    axios.get('/api/auth/user', { withCredentials: true })
      .then(res => {
        setUser(res.data.user)
        if (res.data.user) {
          localStorage.setItem('user', JSON.stringify(res.data.user))
        }
      })
      .catch(() => {
        setUser(null)
        localStorage.removeItem('user')
      })
  }, [])

  if (user === undefined) return <p>Loading…</p>

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50">
      {user ? (
        <>
          <h1 className="text-3xl font-semibold">Hello, {user.displayName}</h1>
          <div className="mt-4 flex space-x-4">
            <button
              onClick={async () => {
                await axios.post('/api/auth/logout', {}, { withCredentials: true })
                setUser(null)
                localStorage.removeItem('user')
              }}
              className="px-4 py-2 bg-red-500 text-white rounded"
            >
              Logout
            </button>
            <Link
              to="/profile"
              className="px-4 py-2 bg-blue-600 text-white rounded"
            >
              View Profile
            </Link>
          </div><div className="bg-red-500 p-4 text-white">
  🔥 Tailwind is finally working!
</div>
        </>
      ) : (
        <button
          onClick={() => { window.location.href = '/auth/google' }}
          className="px-6 py-3 bg-blue-600 text-white rounded-full text-lg"
        >
          Sign in with Google
        </button>
      )}
    </div>
  )
}

=== client\src\index.css ===
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}


=== client\src\main.jsx ===
// client/src/main.jsx¨
import './index.css';
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import axios from 'axios';

import App from './App';
import Profile from './profile';
import './index.css';

// Make sure Axios sends cookies
axios.defaults.withCredentials = true;

// Simple auth guard using your stored user (you could move this into context or a hook)
function RequireAuth({ children }) {
  const userJson = localStorage.getItem('user');
  const user = userJson ? JSON.parse(userJson) : null;
  return user ? children : <Navigate to="/" />;
}

// Create the root and mount your router
const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<App />} />
        <Route path="/profile" element={<Profile />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>
)


=== client\src\profile.jsx ===
import { useEffect, useState } from 'react'
import axios from 'axios'
import { Link, useNavigate } from 'react-router-dom'

export default function Profile() {
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    axios.get('/api/profile', { withCredentials: true })
      .then(res => {
        setUser(res.data.user)
      })
      .catch(err => {
        console.error('Profile fetch failed:', err)
        setUser(null)
      })
      .finally(() => {
        setLoading(false)
      })
  }, [])

  if (loading) {
    return <p>Loading profile…</p>
  }

  // After loading completes, if no user, redirect to home (or show a message)
  if (!user) {
    // Option A: redirect back to home
    // navigate('/')
    // return null

    // Option B: show a message with a link
    return (
      <div className="p-6">
        <p className="text-red-500">You must be logged in to view this page.</p>
        <Link to="/" className="text-blue-500 hover:underline">&larr; Back to Home</Link>
      </div>
    )
  }

  // We have a user—show their info
  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Your Profile</h2>
      <p><strong>ID:</strong> {user.id}</p>
      <p><strong>Name:</strong> {user.displayName}</p>
      <Link to="/" className="mt-6 inline-block text-blue-500 hover:underline">&larr; Back to Home</Link>
    </div>
  )
}


=== client\tailwind.config.cjs ===
// client/tailwind.config.cjs
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      './index.html',
      './src/**/*.{js,jsx,ts,tsx}',
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }

=== client\vite.config.js ===
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/auth': {
        target: 'http://localhost:4000',
        changeOrigin: true,
      },
      '/api': {
        target: 'http://localhost:4000',
        changeOrigin: true,
      },
    }
  }
})


